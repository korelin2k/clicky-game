{"version":3,"sources":["components/Banner/index.js","components/Card/index.js","components/CardList/index.js","App.js","serviceWorker.js","index.js"],"names":["withStyles","root","flexGrow","grow","menuButton","marginLeft","marginRight","props","classes","currentScore","highScore","react_default","a","createElement","className","AppBar_default","position","Toolbar_default","Typography_default","variant","color","card","maxWidth","media","height","width","name","image","onClick","Card_default","CardActionArea_default","CardMedia_default","title","CardContent_default","gutterBottom","component","theme","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","icon","_useState","useState","_useState2","Object","slicedToArray","setCurrentScore","_useState3","_useState4","currentChoice","setCurrentChoice","_useState5","_useState6","setHighScore","_useState7","_useState8","selections","setSelections","useEffect","console","log","concat","includes","toConsumableArray","Banner","GridList_default","cellHeight","cols","arra1","temp","index","ctr","length","Math","floor","random","shuffle","gotChars","map","tile","GridListTile_default","key","_id","components_Card","id","App","CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2SAwCeA,2BAjCA,CACbC,KAAM,CACJC,SAAU,GAEZC,KAAM,CACJD,SAAU,GAEZE,WAAY,CACVC,YAAa,GACbC,YAAa,KAwBFN,CApBf,SAAsBO,GAAO,IACnBC,EAAqCD,EAArCC,QAASC,EAA4BF,EAA5BE,aAAcC,EAAcH,EAAdG,UAC/B,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAQP,MACtBU,EAAAC,EAAAC,cAACE,EAAAH,EAAD,CAAQI,SAAS,UACfL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACED,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,KAAKC,MAAM,UAAUN,UAAWN,EAAQL,MAA5D,iCADF,UAIUM,EAJV,iBAIsCC,2ECc/BV,2BAlCA,CACXqB,KAAM,CACFC,SAAU,KAEdC,MAAO,CACHC,OAAQ,IACRC,MAAO,MA4BAzB,CAxBf,SAAmBO,GAAO,IACdC,EAAkCD,EAAlCC,QAASkB,EAAyBnB,EAAzBmB,KAAMC,EAAmBpB,EAAnBoB,MAAOC,EAAYrB,EAAZqB,QAC9B,OACIjB,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CAAME,UAAWN,EAAQa,MACrBV,EAAAC,EAAAC,cAACiB,EAAAlB,EAAD,CAAgBgB,QAASA,GACrBjB,EAAAC,EAAAC,cAACkB,EAAAnB,EAAD,CACIE,UAAWN,EAAQe,MACnBI,MAAOA,EACPK,MAAON,IAEXf,EAAAC,EAAAC,cAACoB,EAAArB,EAAD,KACID,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYsB,cAAY,EAACf,QAAQ,KAAKgB,UAAU,MAC3CT,gBC6DV1B,2BAnFA,SAAAoC,GAAK,MAAK,CACrBnC,KAAM,CACFoC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBL,EAAMM,QAAQC,WAAWC,OAE9CC,SAAU,CACNvB,SAAU,KAEdwB,KAAM,CACF1B,MAAO,+BAuEApB,CAtDf,SAA0BO,GAAO,IACrBC,EAAYD,EAAZC,QADqBuC,EAEWC,oBAAU,GAFrBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAEtBtC,EAFsBwC,EAAA,GAERG,EAFQH,EAAA,GAAAI,EAGaL,mBAAS,IAHtBM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAGtBE,EAHsBD,EAAA,GAGPE,EAHOF,EAAA,GAAAG,EAIKT,mBAAS,GAJdU,EAAAR,OAAAC,EAAA,EAAAD,CAAAO,EAAA,GAItB/C,EAJsBgD,EAAA,GAIXC,EAJWD,EAAA,GAAAE,EAKOZ,mBAAS,IALhBa,EAAAX,OAAAC,EAAA,EAAAD,CAAAU,EAAA,GAKtBE,EALsBD,EAAA,GAKVE,EALUF,EAAA,GAgC7B,OAzBAG,oBAAU,YACiB,IAAnBT,IACAU,QAAQC,IAAR,kBAAAC,OAA8B1D,IAC1BqD,EAAWM,SAASb,GAChB9C,EAAeC,GACfiD,EAAalD,GACbwD,QAAQC,IAAR,iBAAAC,OAA6B1D,EAA7B,SAAA0D,OAAiDL,IACjDV,EAAgB,GAChBW,EAAc,MAEdE,QAAQC,IAAR,gBAAAC,OAA4B1D,EAA5B,SAAA0D,OAAgDL,IAChDV,EAAgB,GAChBW,EAAc,MAGlBA,EAAa,GAAAI,OAAAjB,OAAAmB,EAAA,EAAAnB,CACNY,GADM,CACMP,KAEnBH,EAAgB,SAAA3C,GAAY,OAAIA,EAAe,KAGnD+C,GAAkB,KAEvB,CAACD,IAGA5C,EAAAC,EAAAC,cAAA,OAAKC,UAAWN,EAAQP,MACpBU,EAAAC,EAAAC,cAACyD,EAAD,CAAQ7D,aAAcA,EAAcC,UAAWA,IAK/CC,EAAAC,EAAAC,cAAC0D,EAAA3D,EAAD,CAAU4D,WAAY,IAAKC,KAAM,EAAG3D,UAAWN,EAAQqC,UApDnE,SAAiB6B,GAGb,IAFA,IAAwBC,EAAMC,EAA1BC,EAAMH,EAAMI,OAETD,EAAM,GACTD,EAAQG,KAAKC,MAAMD,KAAKE,SAAWJ,GAEnCF,EAAOD,IADPG,GAEAH,EAAMG,GAAOH,EAAME,GACnBF,EAAME,GAASD,EAEnB,OAAOD,EA2CMQ,CAAQC,GAAUC,IAAI,SAAAC,GAAI,OACvB1E,EAAAC,EAAAC,cAACyE,EAAA1E,EAAD,CAAc2E,IAAKF,EAAKG,KACpB7E,EAAAC,EAAAC,cAAC4E,EAAD,CAAW/D,KAAM2D,EAAK3D,KAAMC,MAAO0D,EAAK1D,MAAO+D,GAAIL,EAAKG,IAAK5D,QAAS,kBAAM4B,EAAiB6B,EAAKG,eClE3GG,mLARP,OACIhF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACXH,EAAAC,EAAAC,cAAC+E,EAAD,cAJEC,aCQEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzF,EAAAC,EAAAC,cAACwF,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.65ff5c0b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n  root: {\n    flexGrow: 1,\n  },\n  grow: {\n    flexGrow: 1,\n  },\n  menuButton: {\n    marginLeft: -12,\n    marginRight: 20,\n  },\n};\n\nfunction ButtonAppBar(props) {\n  const { classes, currentScore, highScore } = props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\n            Game of Thrones - Clicky Game\n          </Typography>\n          Score: {currentScore} | Top Score: {highScore}\n        </Toolbar>\n      </AppBar>\n    </div>\n  );\n}\n\nButtonAppBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(ButtonAppBar);","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\n\nconst styles = {\n    card: {\n        maxWidth: 200,\n    },\n    media: {\n        height: 200,\n        width: 200,\n    },\n};\n\nfunction MediaCard(props) {\n    const { classes, name, image, onClick } = props;\n    return (\n        <Card className={classes.card}>\n            <CardActionArea onClick={onClick}>\n                <CardMedia\n                    className={classes.media}\n                    image={image}\n                    title={name}\n                />\n                <CardContent>\n                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\n                        {name}\n                    </Typography>\n                </CardContent>\n            </CardActionArea>\n        </Card>\n    );\n}\n\nMediaCard.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MediaCard);","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport Banner from \"../Banner\";\nimport MediaCard from '../Card';\nimport gotChars from \"../../char.json\";\n\nconst styles = theme => ({\n    root: {\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'space-around',\n        overflow: 'hidden',\n        backgroundColor: theme.palette.background.paper,\n    },\n    gridList: {\n        maxWidth: 1000,\n    },\n    icon: {\n        color: 'rgba(255, 255, 255, 0.54)',\n    },\n});\n\nfunction shuffle(arra1) {\n    var ctr = arra1.length, temp, index;\n\n    while (ctr > 0) {\n        index = Math.floor(Math.random() * ctr);\n        ctr--;\n        temp = arra1[ctr];\n        arra1[ctr] = arra1[index];\n        arra1[index] = temp;\n    }\n    return arra1;\n}\n\nfunction TitlebarGridList(props) {\n    const { classes } = props;\n    const [currentScore, setCurrentScore] = useState(-1);\n    const [currentChoice, setCurrentChoice] = useState(\"\");\n    const [highScore, setHighScore] = useState(0);\n    const [selections, setSelections] = useState([]);\n\n    useEffect(() => {\n        if (currentChoice !== -1) {\n            console.log(`Current Score: ${currentScore}`);\n            if (selections.includes(currentChoice)) {\n                if (currentScore > highScore) {\n                    setHighScore(currentScore);\n                    console.log(`Winner! With: ${currentScore} and ${selections}`);\n                    setCurrentScore(0);\n                    setSelections([]);\n                } else {\n                    console.log(`Loser! With: ${currentScore} and ${selections}`);\n                    setCurrentScore(0);\n                    setSelections([]);\n                }\n            } else {\n                setSelections([\n                    ...selections, currentChoice\n                ]);\n                setCurrentScore(currentScore => currentScore + 1);\n            }\n\n            setCurrentChoice(-1);\n        }\n    }, [currentChoice]);\n\n    return (\n        <div className={classes.root}>\n            <Banner currentScore={currentScore} highScore={highScore}/>\n            {/* <div>\n            Current Score: {currentScore}\n            High Score: {highScore}\n            </div> */}\n            <GridList cellHeight={250} cols={4} className={classes.gridList}>\n                {shuffle(gotChars).map(tile => (\n                    <GridListTile key={tile._id}>\n                        <MediaCard name={tile.name} image={tile.image} id={tile._id} onClick={() => setCurrentChoice(tile._id)} />\n                    </GridListTile>\n                ))}\n            </GridList>\n        </div>\n    );\n}\n\nTitlebarGridList.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TitlebarGridList);","import React, { Component } from 'react';\nimport './App.css';\nimport CardList from \"./components/CardList\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <CardList />\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}